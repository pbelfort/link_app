// Mocks generated by Mockito 5.4.6 from annotations
// in link_app/test/usecase/create_alias_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:link_app/core/adapters/http/i_http_adpter.dart' as _i2;
import 'package:link_app/core/error/failure.dart' as _i7;
import 'package:link_app/data/remote/alias_remote.dart' as _i4;
import 'package:link_app/domain/entities/alias_entity.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIHttpAdapter_0 extends _i1.SmartFake implements _i2.IHttpAdapter {
  _FakeIHttpAdapter_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AliasRemote].
///
/// See the documentation for Mockito's code generation for more information.
class MockAliasRemote extends _i1.Mock implements _i4.AliasRemote {
  @override
  _i2.IHttpAdapter get http =>
      (super.noSuchMethod(
            Invocation.getter(#http),
            returnValue: _FakeIHttpAdapter_0(this, Invocation.getter(#http)),
            returnValueForMissingStub: _FakeIHttpAdapter_0(
              this,
              Invocation.getter(#http),
            ),
          )
          as _i2.IHttpAdapter);

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.AliasEntity>> createAlias(
    String? url,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createAlias, [url]),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, _i8.AliasEntity>>.value(
                  _FakeEither_1<_i7.Failure, _i8.AliasEntity>(
                    this,
                    Invocation.method(#createAlias, [url]),
                  ),
                ),
            returnValueForMissingStub:
                _i6.Future<_i3.Either<_i7.Failure, _i8.AliasEntity>>.value(
                  _FakeEither_1<_i7.Failure, _i8.AliasEntity>(
                    this,
                    Invocation.method(#createAlias, [url]),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, _i8.AliasEntity>>);
}
